// Code generated by "enumer -type EnumType -json"; DO NOT EDIT.

package tryenumer

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _EnumTypeName = "RedGreenBlue"

var _EnumTypeIndex = [...]uint8{0, 3, 8, 12}

const _EnumTypeLowerName = "redgreenblue"

func (i EnumType) String() string {
	i -= 1
	if i >= EnumType(len(_EnumTypeIndex)-1) {
		return fmt.Sprintf("EnumType(%d)", i+1)
	}
	return _EnumTypeName[_EnumTypeIndex[i]:_EnumTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _EnumTypeNoOp() {
	var x [1]struct{}
	_ = x[Red-(1)]
	_ = x[Green-(2)]
	_ = x[Blue-(3)]
}

var _EnumTypeValues = []EnumType{Red, Green, Blue}

var _EnumTypeNameToValueMap = map[string]EnumType{
	_EnumTypeName[0:3]:       Red,
	_EnumTypeLowerName[0:3]:  Red,
	_EnumTypeName[3:8]:       Green,
	_EnumTypeLowerName[3:8]:  Green,
	_EnumTypeName[8:12]:      Blue,
	_EnumTypeLowerName[8:12]: Blue,
}

var _EnumTypeNames = []string{
	_EnumTypeName[0:3],
	_EnumTypeName[3:8],
	_EnumTypeName[8:12],
}

// EnumTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func EnumTypeString(s string) (EnumType, error) {
	if val, ok := _EnumTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _EnumTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to EnumType values", s)
}

// EnumTypeValues returns all values of the enum
func EnumTypeValues() []EnumType {
	return _EnumTypeValues
}

// EnumTypeStrings returns a slice of all String values of the enum
func EnumTypeStrings() []string {
	strs := make([]string, len(_EnumTypeNames))
	copy(strs, _EnumTypeNames)
	return strs
}

// IsAEnumType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i EnumType) IsAEnumType() bool {
	for _, v := range _EnumTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for EnumType
func (i EnumType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for EnumType
func (i *EnumType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("EnumType should be a string, got %s", data)
	}

	var err error
	*i, err = EnumTypeString(s)
	return err
}
